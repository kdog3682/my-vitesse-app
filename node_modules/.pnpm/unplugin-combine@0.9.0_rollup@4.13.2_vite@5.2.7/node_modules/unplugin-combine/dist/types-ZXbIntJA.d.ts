import { UnpluginInstance } from 'unplugin';
import { Configuration } from 'webpack';
import { Configuration as Configuration$1 } from '@rspack/core';
import { Plugin as Plugin$1 } from 'rollup';
import { Plugin as Plugin$2 } from 'vite';
import { Plugin as Plugin$3 } from 'esbuild';

type WebpackPlugin = NonNullable<Configuration['plugins']> extends Array<infer T> ? T : never;
type RspackPlugin = NonNullable<Configuration$1['plugins']> extends Array<infer T> ? T : never;
interface PluginMap {
    rollup: Plugin$1;
    vite: Plugin$2;
    esbuild: Plugin$3;
    webpack: WebpackPlugin;
    rspack: RspackPlugin;
}
type PluginType = keyof PluginMap;
type Plugin = PluginMap[PluginType];
type RemoveFalsy<T> = Exclude<T, false | '' | 0 | null | undefined>;
type Factory<UserOptions> = (userOptions: UserOptions, meta: {
    framework?: PluginType;
}) => CombineOptions;
type FactoryOutput<UserOptions, Return> = [never] extends UserOptions ? () => Return : undefined extends UserOptions ? (options?: UserOptions) => Return : (options: UserOptions) => Return;
type Unplugin<UserOptions> = {
    instance: UnpluginInstance<UserOptions, boolean> | UnpluginCombineInstance<any>;
    options?: UserOptions;
};
type OptionsPlugin = Plugin | Unplugin<any> | OptionsPlugin[];
interface CombineOptions {
    name: string;
    /** vite only */
    enforce?: 'post' | 'pre' | undefined;
    plugins: OptionsPlugin;
}
interface UnpluginCombineInstance<UserOptions> {
    rollup: FactoryOutput<UserOptions, Plugin$1[]>;
    webpack: FactoryOutput<UserOptions, WebpackPlugin>;
    rspack: FactoryOutput<UserOptions, RspackPlugin>;
    vite: FactoryOutput<UserOptions, Plugin$2[]>;
    esbuild: FactoryOutput<UserOptions, Plugin$3>;
    raw: Factory<UserOptions>;
    plugins: FactoryOutput<UserOptions, OptionsPlugin>;
}

export type { CombineOptions as C, Factory as F, OptionsPlugin as O, PluginType as P, RemoveFalsy as R, UnpluginCombineInstance as U, WebpackPlugin as W, FactoryOutput as a, PluginMap as b, RspackPlugin as c, Plugin as d, Unplugin as e };
