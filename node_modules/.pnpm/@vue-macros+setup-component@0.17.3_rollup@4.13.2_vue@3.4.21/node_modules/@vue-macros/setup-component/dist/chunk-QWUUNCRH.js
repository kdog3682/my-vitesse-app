"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }







var _chunkMLW3MI4Djs = require('./chunk-MLW3MI4D.js');

// src/index.ts
var _process = require('process'); var _process2 = _interopRequireDefault(_process);
var _unplugin = require('unplugin');







var _common = require('@vue-macros/common');
function resolveOptions(options) {
  const root = options.root || _process2.default.cwd();
  const version = options.version || _common.detectVueVersion.call(void 0, root);
  return {
    include: [_common.REGEX_SRC_FILE],
    exclude: [_common.REGEX_SETUP_SFC, _common.REGEX_VUE_SUB, _common.REGEX_NODE_MODULES],
    ...options,
    root,
    version
  };
}
var name = "unplugin-vue-setup-component";
var PrePlugin = _unplugin.createUnplugin.call(void 0, 
  (userOptions = {}, meta) => {
    const options = resolveOptions(userOptions);
    const filter = _common.createFilter.call(void 0, options);
    const setupComponentContext = {};
    return {
      name: `${name}-pre`,
      enforce: "pre",
      resolveId(id, importer) {
        if (_chunkMLW3MI4Djs.SETUP_COMPONENT_ID_REGEX.test(id))
          return id;
        if (["rollup", "vite"].includes(meta.framework) && importer && _chunkMLW3MI4Djs.isSubModule.call(void 0, importer)) {
          const mainModule = _chunkMLW3MI4Djs.getMainModule.call(void 0, importer, options.root);
          return this.resolve(id, mainModule, {
            skipSelf: true
          });
        }
      },
      loadInclude(id) {
        return _chunkMLW3MI4Djs.SETUP_COMPONENT_ID_REGEX.test(id);
      },
      load(id) {
        return _chunkMLW3MI4Djs.loadSetupComponent.call(void 0, id, setupComponentContext, options.root);
      },
      transformInclude(id) {
        return filter(id);
      },
      transform(code, id) {
        return _chunkMLW3MI4Djs.transformSetupComponent.call(void 0, code, id, setupComponentContext);
      },
      vite: {
        configResolved(config) {
          options.root = config.root;
        },
        handleHotUpdate: (ctx) => {
          if (filter(ctx.file)) {
            return _chunkMLW3MI4Djs.hotUpdateSetupComponent.call(void 0, ctx, setupComponentContext);
          }
        }
      }
    };
  }
);
var PostPlugin = _unplugin.createUnplugin.call(void 0, () => {
  return {
    name: `${name}-post`,
    enforce: "post",
    transformInclude(id) {
      return _chunkMLW3MI4Djs.isSubModule.call(void 0, id);
    },
    transform(code, id) {
      return _chunkMLW3MI4Djs.transformPost.call(void 0, code, id);
    },
    rollup: {
      transform: {
        order: "post",
        handler(code, id) {
          if (!_chunkMLW3MI4Djs.isSubModule.call(void 0, id))
            return;
          return _chunkMLW3MI4Djs.transformPost.call(void 0, code, id);
        }
      }
    }
  };
});
var plugin = _unplugin.createUnplugin.call(void 0, 
  (options = {}, meta) => {
    return [PrePlugin.raw(options, meta), PostPlugin.raw(options, meta)];
  }
);
var src_default = plugin;



exports.src_default = src_default;
