import * as unplugin_combine from 'unplugin-combine';
import { Options as Options$1 } from '@vue-macros/better-define';
import { Options as Options$2 } from '@vue-macros/boolean-prop';
import { Options as Options$3 } from '@vue-macros/chain-call';
import { Options as Options$4 } from '@vue-macros/define-emit';
import { Options as Options$5 } from '@vue-macros/define-models';
import { Options as Options$7 } from '@vue-macros/define-prop';
import { Options as Options$8 } from '@vue-macros/define-props';
import { Options as Options$9 } from '@vue-macros/define-props-refs';
import { Options as Options$a } from '@vue-macros/define-render';
import { Options as Options$b } from '@vue-macros/define-slots';
import { Options as Options$c } from '@vue-macros/export-expose';
import { Options as Options$d } from '@vue-macros/export-props';
import { Options as Options$e } from '@vue-macros/export-render';
import { Options as Options$f } from '@vue-macros/hoist-static';
import { Options as Options$g } from '@vue-macros/jsx-directive';
import { Options as Options$h } from '@vue-macros/named-template';
import { Options as Options$i } from '@vue-macros/reactivity-transform';
import { Options as Options$j } from '@vue-macros/setup-block';
import { Options as Options$k } from '@vue-macros/setup-component';
import { Options as Options$l } from '@vue-macros/setup-sfc';
import { Options as Options$m } from '@vue-macros/short-bind';
import { Options as Options$n } from '@vue-macros/short-emits';
import { Options as Options$o } from '@vue-macros/short-vmodel';
import { Options as Options$6 } from 'unplugin-vue-define-options';

interface FeatureOptionsMap {
    betterDefine: Options$1;
    booleanProp: Options$2;
    chainCall: Options$3;
    defineEmit: Options$4;
    defineModels: Options$5;
    defineOptions: Options$6;
    defineProp: Options$7;
    defineProps: Options$8;
    definePropsRefs: Options$9;
    defineRender: Options$a;
    defineSlots: Options$b;
    exportExpose: Options$c;
    exportProps: Options$d;
    exportRender: Options$e;
    hoistStatic: Options$f;
    jsxDirective: Options$g;
    namedTemplate: Options$h;
    reactivityTransform: Options$i;
    setupBlock: Options$j;
    setupComponent: Options$k;
    setupSFC: Options$l;
    shortBind: Options$m;
    shortEmits: Options$n;
    shortVmodel: Options$o;
}
type FeatureName = keyof FeatureOptionsMap;
type FeatureOptions = FeatureOptionsMap[FeatureName];
interface OptionsCommon {
    root?: string;
    version?: number;
    isProduction?: boolean;
    plugins?: {
        vue?: any;
        vueJsx?: any;
    };
    /** @internal */
    nuxtContext?: {
        isClient?: boolean;
    };
}
type OptionalSubOptions<T> = boolean | Omit<T, keyof OptionsCommon> | undefined;
type Options = OptionsCommon & {
    [K in FeatureName]?: OptionalSubOptions<FeatureOptionsMap[K]>;
};
type OptionsResolved = Required<OptionsCommon> & {
    [K in FeatureName]: false | FeatureOptionsMap[K];
};
declare function resolveOptions({ isProduction, nuxtContext, plugins, root, version, betterDefine, booleanProp, chainCall, defineEmit, defineModels, defineOptions, defineProp, defineProps, definePropsRefs, defineRender, defineSlots, exportExpose, exportProps, exportRender, hoistStatic, jsxDirective, namedTemplate, reactivityTransform, setupBlock, setupComponent, setupSFC, shortBind, shortEmits, shortVmodel, }: Options): OptionsResolved;
declare const _default: unplugin_combine.UnpluginCombineInstance<Options | undefined>;

export { type FeatureName, type FeatureOptions, type FeatureOptionsMap, type Options, type OptionsCommon, type OptionsResolved, _default as default, resolveOptions };
