// src/index.ts
import process from "node:process";
import {
  createCombinePlugin
} from "unplugin-combine";

// src/core/index.ts
function excludeDepOptimize() {
  return {
    name: "vue-macros-exclude-dep-optimize",
    config() {
      return {
        optimizeDeps: {
          exclude: ["unplugin-vue-macros/macros"]
        }
      };
    }
  };
}

// src/index.ts
import VueBetterDefine from "@vue-macros/better-define";
import VueBooleanProp from "@vue-macros/boolean-prop";
import VueChainCall from "@vue-macros/chain-call";
import { detectVueVersion } from "@vue-macros/common";
import VueDefineEmit from "@vue-macros/define-emit";
import VueDefineModels from "@vue-macros/define-models";
import VueDefineProp from "@vue-macros/define-prop";
import VueDefineProps from "@vue-macros/define-props";
import VueDefinePropsRefs from "@vue-macros/define-props-refs";
import VueDefineRender from "@vue-macros/define-render";
import VueDefineSlots from "@vue-macros/define-slots";
import { Devtools } from "@vue-macros/devtools";
import VueExportExpose from "@vue-macros/export-expose";
import VueExportProps from "@vue-macros/export-props";
import VueExportRender from "@vue-macros/export-render";
import VueHoistStatic from "@vue-macros/hoist-static";
import VueJsxDirective from "@vue-macros/jsx-directive";
import VueNamedTemplate from "@vue-macros/named-template";
import VueReactivityTransform from "@vue-macros/reactivity-transform";
import VueSetupBlock from "@vue-macros/setup-block";
import VueSetupComponent from "@vue-macros/setup-component";
import VueSetupSFC from "@vue-macros/setup-sfc";
import VueShortBind from "@vue-macros/short-bind";
import VueShortEmits from "@vue-macros/short-emits";
import VueShortVmodel from "@vue-macros/short-vmodel";
import VueDefineOptions from "unplugin-vue-define-options";
function resolveOptions({
  isProduction,
  nuxtContext,
  plugins,
  root,
  version,
  betterDefine,
  booleanProp,
  chainCall,
  defineEmit,
  defineModels,
  defineOptions,
  defineProp,
  defineProps,
  definePropsRefs,
  defineRender,
  defineSlots,
  exportExpose,
  exportProps,
  exportRender,
  hoistStatic,
  jsxDirective,
  namedTemplate,
  reactivityTransform,
  setupBlock,
  setupComponent,
  setupSFC,
  shortBind,
  shortEmits,
  shortVmodel
}) {
  function resolveSubOptions(options, commonOptions, defaultEnabled = true) {
    options = options ?? defaultEnabled;
    if (!options)
      return false;
    return { ...options === true ? {} : options, ...commonOptions };
  }
  root = root || process.cwd();
  version = version || detectVueVersion(root);
  isProduction = isProduction ?? process.env.NODE_ENV === "production";
  return {
    isProduction,
    nuxtContext: nuxtContext || {},
    plugins: plugins || {},
    root,
    version,
    betterDefine: resolveSubOptions(betterDefine, {
      isProduction,
      version
    }),
    booleanProp: resolveSubOptions(
      booleanProp,
      { version },
      false
    ),
    chainCall: resolveSubOptions(chainCall, { version }),
    defineEmit: resolveSubOptions(defineEmit, {
      isProduction,
      version
    }),
    defineModels: resolveSubOptions(defineModels, { version }),
    defineOptions: resolveSubOptions(
      defineOptions,
      { version },
      version < 3.3
    ),
    defineProp: resolveSubOptions(defineProp, {
      isProduction,
      version
    }),
    defineProps: resolveSubOptions(defineProps, { version }),
    definePropsRefs: resolveSubOptions(definePropsRefs, {
      version
    }),
    defineRender: resolveSubOptions(defineRender, { version }),
    defineSlots: resolveSubOptions(
      defineSlots,
      { version },
      version < 3.3
    ),
    exportExpose: resolveSubOptions(
      exportExpose,
      { version },
      false
    ),
    exportProps: resolveSubOptions(
      exportProps,
      { version },
      false
    ),
    exportRender: resolveSubOptions(
      exportRender,
      { version },
      false
    ),
    hoistStatic: resolveSubOptions(hoistStatic, { version }),
    jsxDirective: resolveSubOptions(jsxDirective, {
      version
    }),
    namedTemplate: resolveSubOptions(namedTemplate, {
      version
    }),
    reactivityTransform: resolveSubOptions(
      reactivityTransform,
      { version }
    ),
    setupBlock: resolveSubOptions(setupBlock, { version }, false),
    setupComponent: resolveSubOptions(setupComponent, {
      root,
      version
    }),
    setupSFC: resolveSubOptions(setupSFC, { version }, false),
    shortBind: resolveSubOptions(shortBind, { version }, false),
    shortEmits: resolveSubOptions(
      shortEmits,
      { version },
      version < 3.3
    ),
    shortVmodel: resolveSubOptions(shortVmodel, { version })
  };
}
function resolvePlugin(unplugin, framework, options) {
  if (!options)
    return;
  return unplugin[framework](options);
}
var name = "unplugin-vue-macros";
var src_default = createCombinePlugin(
  (userOptions = {}, meta) => {
    const options = resolveOptions(userOptions);
    const framework = meta.framework;
    const setupComponentPlugins = resolvePlugin(
      VueSetupComponent,
      framework,
      options.setupComponent
    );
    const namedTemplatePlugins = resolvePlugin(
      VueNamedTemplate,
      framework,
      options.namedTemplate
    );
    const plugins = [
      resolvePlugin(VueSetupSFC, framework, options.setupSFC),
      setupComponentPlugins?.[0],
      resolvePlugin(VueSetupBlock, framework, options.setupBlock),
      namedTemplatePlugins?.[0],
      // props
      resolvePlugin(VueChainCall, framework, options.chainCall),
      resolvePlugin(VueDefineProps, framework, options.defineProps),
      resolvePlugin(VueDefinePropsRefs, framework, options.definePropsRefs),
      resolvePlugin(VueExportProps, framework, options.exportProps),
      // emits
      resolvePlugin(VueDefineEmit, framework, options.defineEmit),
      resolvePlugin(VueShortEmits, framework, options.shortEmits),
      // both props & emits
      resolvePlugin(VueDefineModels, framework, options.defineModels),
      // convert to runtime props & emits
      resolvePlugin(VueBetterDefine, framework, options.betterDefine),
      // runtime props
      resolvePlugin(VueDefineProp, framework, options.defineProp),
      resolvePlugin(VueDefineSlots, framework, options.defineSlots),
      resolvePlugin(VueExportRender, framework, options.exportRender),
      resolvePlugin(VueExportExpose, framework, options.exportExpose),
      resolvePlugin(
        VueReactivityTransform,
        framework,
        options.reactivityTransform
      ),
      resolvePlugin(VueHoistStatic, framework, options.hoistStatic),
      resolvePlugin(VueDefineOptions, framework, options.defineOptions),
      resolvePlugin(VueJsxDirective, framework, options.jsxDirective),
      ...framework === "vite" || framework === "rollup" ? [
        resolvePlugin(
          // VueBooleanProp is not an unplugin, by now
          VueBooleanProp,
          framework,
          options.booleanProp
        ),
        resolvePlugin(
          // VueShortBind is not an unplugin, by now
          VueShortBind,
          framework,
          options.shortBind
        ),
        resolvePlugin(
          // VueShortVmodel is not an unplugin, by now
          VueShortVmodel,
          framework,
          options.shortVmodel
        )
      ] : [],
      options.plugins.vue,
      options.plugins.vueJsx,
      resolvePlugin(VueDefineRender, framework, options.defineRender),
      setupComponentPlugins?.[1],
      namedTemplatePlugins?.[1],
      framework === "vite" ? Devtools({ nuxtContext: options.nuxtContext }) : void 0,
      framework === "vite" ? excludeDepOptimize() : void 0
    ].filter(Boolean);
    return {
      name,
      plugins
    };
  }
);

export {
  resolveOptions,
  src_default
};
