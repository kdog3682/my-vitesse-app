// src/define-slots.ts
var import_common = require("@vue-macros/common");
var import_language_core = require("@vue/language-core");
function transform({
  embeddedFile,
  typeArg,
  vueVersion
}) {
  (0, import_language_core.replaceSourceRange)(
    embeddedFile.content,
    "scriptSetup",
    typeArg.pos,
    typeArg.pos,
    "__VLS_DefineSlots<"
  );
  (0, import_language_core.replaceSourceRange)(
    embeddedFile.content,
    "scriptSetup",
    typeArg.end,
    typeArg.end,
    ">"
  );
  embeddedFile.content.push(
    `type __VLS_DefineSlots<T> = { [SlotName in keyof T]: T[SlotName] extends Function ? T[SlotName] : (_: T[SlotName]) => any };
`
  );
  if (vueVersion < 3) {
    embeddedFile.content.push(
      `declare function defineSlots<S extends Record<string, any> = Record<string, any>>(): S;
`
    );
  }
}
function getTypeArg(ts, sfc) {
  function getCallArg(node) {
    if (!(ts.isCallExpression(node) && ts.isIdentifier(node.expression) && node.expression.escapedText === import_common.DEFINE_SLOTS && node.typeArguments?.length === 1))
      return void 0;
    return node.typeArguments[0];
  }
  return sfc.scriptSetup?.ast.forEachChild((node) => {
    if (ts.isExpressionStatement(node)) {
      return getCallArg(node.expression);
    } else if (ts.isVariableStatement(node)) {
      return node.declarationList.forEachChild((decl) => {
        if (ts.isVariableDeclaration(decl) && decl.initializer)
          return getCallArg(decl.initializer);
      });
    }
  });
}
var plugin = ({
  modules: { typescript: ts },
  vueCompilerOptions
}) => {
  return {
    name: "vue-macros-define-slots",
    version: 1,
    resolveEmbeddedFile(fileName, sfc, embeddedFile) {
      if (embeddedFile.kind !== import_language_core.FileKind.TypeScriptHostFile || !sfc.scriptSetup || !sfc.scriptSetup.ast)
        return;
      const typeArg = getTypeArg(ts, sfc);
      if (!typeArg)
        return;
      transform({
        embeddedFile,
        typeArg,
        vueVersion: vueCompilerOptions.target
      });
    }
  };
};
module.exports = plugin;
