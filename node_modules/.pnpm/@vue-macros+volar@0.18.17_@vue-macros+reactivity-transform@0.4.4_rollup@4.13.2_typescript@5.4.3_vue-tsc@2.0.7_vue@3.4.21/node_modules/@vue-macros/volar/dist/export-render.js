// src/export-render.ts
var import_language_core2 = require("@vue/language-core");
var import_pluginutils = require("@rollup/pluginutils");

// src/common.ts
var import_language_core = require("@vue/language-core");
function getVolarOptions(vueCompilerOptions) {
  return vueCompilerOptions.vueMacros;
}

// src/export-render.ts
function transform({
  fileName,
  file,
  sfc,
  ts,
  volarOptions
}) {
  const filter = (0, import_pluginutils.createFilter)(
    volarOptions.include || /.*/,
    volarOptions.exclude
  );
  if (!filter(fileName))
    return;
  for (const stmt of sfc.scriptSetup.ast.statements) {
    if (!ts.isExportAssignment(stmt))
      continue;
    const start = stmt.expression.getStart(sfc.scriptSetup?.ast);
    const end = stmt.expression.getEnd();
    (0, import_language_core2.replaceSourceRange)(
      file.content,
      "scriptSetup",
      stmt.getStart(sfc.scriptSetup?.ast),
      start,
      "defineRender("
    );
    (0, import_language_core2.replaceSourceRange)(file.content, "scriptSetup", end, end, ")");
  }
}
var plugin = ({
  vueCompilerOptions,
  modules: { typescript: ts }
}) => {
  return {
    name: "vue-macros-export-render",
    version: 1,
    resolveEmbeddedFile(fileName, sfc, embeddedFile) {
      if (embeddedFile.kind !== import_language_core2.FileKind.TypeScriptHostFile || !sfc.scriptSetup || !sfc.scriptSetup.ast)
        return;
      transform({
        fileName,
        file: embeddedFile,
        sfc,
        ts,
        volarOptions: getVolarOptions(vueCompilerOptions)?.exportRender || {}
      });
    }
  };
};
module.exports = plugin;
